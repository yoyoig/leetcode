package com.yoyoig.leetcode.code;


/**
 * <p>
 * 合并有序数组
 * </p>
 *
 * @author mingke  2019-12-12 5:20 下午
 */
public class LeetCode_88_0064 {

    /**
     * 从后开始便利 双指针
     *
     * @param nums1
     * @param m
     * @param nums2
     * @param n
     */
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // nums1(数字部分) 的尾指针
        int i = m - 1;
        // nums2 的尾指针
        int j = n - 1;
        // nums1 (全长度)  的尾指针
        int k = n + m - 1;
        //===============================================================================
        //  两种情况终止循环
        //  1. nums2 先遍历完 则nums1 本身已经时是有序，后续无需 arraycopy j+1 = 0;
        //  2. nums1 先遍历完 则nums2 只剩小元素，nums1 已将大元素全部移到后面。
        //     后续只需要将 nums2 [0 - j]  的元素(j+1个)复制到 nums1 即可
        //===============================================================================
        while (i >= 0 && j >= 0) {
            //===============================================================================
            //  nums1 和 nums2 谁大则将谁移到末尾。然后三个指针同时向前移动一位
            //===============================================================================
            nums1[k--] = nums1[i] < nums2[j] ? nums2[j--] : nums1[i--];
        }
        System.arraycopy(nums2, 0, nums1, 0, j + 1);
    }


}
